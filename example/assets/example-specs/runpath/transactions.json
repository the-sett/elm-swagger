{
  "swagger": "2.0",
  "info": {
    "version": "1.14",
    "title": "Runpath.Transactions",
    "description": "A service for storing transactions, categorisations and metrics\r\n# About\r\nThe Transaction Service is used for storage and retrieval of Customer Transaction data from a variety of third-party sources, provided in a single consistent transaction format.  As well as describing the API Calls available to retrieve Transactions, this specification also describes additional information about additional fields containing enriched and cleansed data for Categories and Descriptions.\r\n\r\n\r\n\r\n# Authentication\r\nTo utilise the Transaction Service, a bearer token must be issued along with the request.  \r\n\r\nDetails on how to obtain a bearer token, and how to utilise it as part of the request are detailed in the [Runpath Platform Authentication Guide](/document/PlatformAuthentication).\r\nTo obtain an access token, follow the instructions in the Platform Authentication guide and add the following scopes:  \r\n<br/>\r\nScopes   | \r\n------------- | \r\ntransactions.read |\t\r\ntransactions.readwrite |\t\r\n\r\n\r\n\r\n# Data Enrichment\r\n## Bank Code Mappings\r\n _The Transactions Model Contains a **codes** property containing transaction code mappings.  This section provides more information about this._ \r\n\r\n\r\nThe Open Banking Standard provides transaction data with two transaction code types:  A proprietary\r\ntransaction code, used by a **specific banking institution**, and also a standard transaction code defined by\r\nthe Open Banking Specification (ISO 20022 - the Universal financial industry message scheme). For example:\r\n```javascript\r\n    \"BankTransactionCode\": { \r\n        \"Code\": \"FixedTermLoans\", \r\n        \"SubCode\": \"Fees(Generic)\"\r\n    }, \r\n    \"ProprietaryBankTransactionCode: { \r\n       \"Code\": \"DirectDebit\", \r\n       \"Issuer\": \"AlphaBank\" \r\n    }\r\n```\r\n\r\nWhen an Open Banking transaction is mapped into our standard transaction format,\r\nthese codes are included in the codes property of the transaction object:\r\n```json\r\n\"codes\": [\r\n          {\r\n             \"scheme\": \"OpenBanking\",\r\n             \"code\": \"FixedTermLoans\",\r\n             \"subCode\": \"Fees(Generic)\"\r\n          },\r\n          {\r\n             \"scheme\": \"AlphaBank\",\r\n             \"code\": \"DirectDebit\"\r\n          }\r\n\t   ]\r\n```\r\n\r\nCodes from other sources, such as Yodlee, are similarly mapped into the codes section.\r\n## Transaction Categorisations\r\n_Verdus optionally performs data enrichment by augmenting the raw transaction data with additional\r\ndata about the category of the transaction. The Transactions Model contains a **categorisations** property containing transaction categories.\r\n\r\nDepending upon the source of the data and the categorisation engines used, there may be multiple categories for a single transaction. For example:\r\n\r\n```json\r\n    \"categorisations\": [\r\n       {\r\n          \"scheme\": \"Yodlee\",\r\n          \"code\": \"Entertainment/Recreation\"\r\n       },\r\n       {\r\n          \"scheme\": \"Trusso\",\r\n          \"code\": \"EXP-B03\",\r\n          \"confidence\": 0.46,\r\n          \"name\": \"Bank Transfer\"\r\n       }\r\n    ]   \r\n```\r\n\r\n\r\n\r\n## Transaction Descriptions\r\nDepending upon the source of the data and the processing performed, a degree of enhancement and cleansing may be performed on the description field.  \r\n\r\nOften, description fields arrive from the third-party data sources in uppercase and with miscellaneous data attached such as merchant and other identifying codes.  \r\n\r\nWhere possible, Verdus strips these away and provides cleansed transaction descriptions in the descriptions collection of the transaction object:\r\n\r\n\r\n```json\r\n\"descriptions\": [\r\n      {\r\n          \"scheme\": \"YodleeOriginal\",\r\n          \"text\": \"Netflix NT346980277\"\r\n      },\r\n      {\r\n          \"scheme\": \"YodleeSimple\",\r\n          \"text\": \"Netflix\"\r\n      }\r\n   ]\r\n```\r\n\r\n\r\n# Metrics & Recurrences\r\nAs well as providing raw transaction data, the Transactions API also provides aggregated analysis data in the form of Recurrences and Metrics.\r\n\r\nRecurrences are transactions that happen with a degree of regularity on a Daily, Weekly, Fortnightly or Monthly basis.  Examples of recurring transactions are Bills, Mortgage Payments, Child Allowance Payments.  These transactions occur regularly, often around the same day of the month and are therefore examples of Recurrences.\r\n\r\nMetrics are aggregated data on income and expenditure.  Several metrics are returned by the Transactions API, defined as follows:   \r\n\r\n### List of Metrics\r\n\r\n\r\nMetric  | Description\r\n------------- | -------------\r\nExpenditureEssential |\tExpenditure on essential items: e.g. Food, Utility Bills, Transport\r\nExpenditureQualityOfLiving |\tExpenditure on non-essential items: e.g. Pub, Holidays, Shows, Theatre\r\nExpenditureCommitted |\tExpenditure on committed regular payments: Gym, Mobile Phone, Direct debits, Bills, Mortgage, Insurance\r\nExpenditureOther |\tMiscellaneous Expenses\r\nIncomeRegular |\tMonthly Salary Payment\r\nIncomeIrregular |\tIrregular Payments: Prizes, Pay for Odd Jobs, Monetary Gift/Loan\r\nIncomeDisposable |\tRemaining income after essential expenses deducted\r\nIncomeRemnant |\tRemaining income after all expenses deducted\r\n\r\nâ€ƒ\r\n"
  },
  "host": "cat.transactions.runpath.com",
  "schemes": [
    "https"
  ],
  "paths": {
    "/owneditems/{ownedItemId}/transactions": {
      "get": {
        "tags": [
          "OwnedItems"
        ],
        "summary": "Get collection of transactions for an owned item",
        "operationId": "OwnedItems_GetTransactionsByOwnedItemId",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ownedItemId",
            "in": "path",
            "description": "The identifier of the owned item",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "Filter transactions using OData syntax e.g. $filter=bookingDate ge 2017-01-01T23:59:59.99Z and bookingDate lt 2017-02-01T23:59:59.99Z",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Transaction"
              }
            },
            "examples": {
              "application/json": [
                {
                  "id": 556665,
                  "createdDate": "0001-01-01T00:00:00+00:00",
                  "bookingDate": "2018-10-07T22:07:18.6749325+00:00",
                  "amount": 9.99,
                  "currency": "GBP",
                  "balance": 1236.65,
                  "address": {
                    "line1": "20 Kensington High Street",
                    "city": "London",
                    "country": "United Kingdom",
                    "postcode": "W8 5JH",
                    "latitude": 51.5074,
                    "longitude": 0.1278
                  },
                  "merchant": {
                    "name": "Netflix",
                    "isoCode": "69865"
                  },
                  "codes": [
                    {
                      "scheme": "OpenBanking",
                      "code": "IssuedCreditTransfer",
                      "subCode": "AutomaticTransfer"
                    },
                    {
                      "scheme": "AlphaBank",
                      "code": "DirectDebit"
                    }
                  ],
                  "categorisations": [
                    {
                      "scheme": "Trusso",
                      "code": "EXP-G03",
                      "confidence": 0.9
                    },
                    {
                      "scheme": "Yodlee",
                      "code": "Entertainment/Recreation",
                      "confidence": 1
                    }
                  ],
                  "descriptions": [
                    {
                      "scheme": "YodleeOriginal",
                      "text": "Netflix NT346980277"
                    },
                    {
                      "scheme": "YodleeSimple",
                      "text": "Netflix"
                    }
                  ]
                }
              ]
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "tags": [
          "OwnedItems"
        ],
        "summary": "Upserts a collection of transactions, creates new transactions and updates those that already exist",
        "operationId": "OwnedItems_UpsertTransactionsForOwnedItem",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ownedItemId",
            "in": "path",
            "description": "The identifier of the owned item",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "transactions",
            "in": "body",
            "description": "The collection of transactions",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Transaction"
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "NoContent"
          },
          "400": {
            "description": "BadRequest"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "tags": [
          "OwnedItems"
        ],
        "summary": "Add a collection of transactions for an owned item",
        "operationId": "OwnedItems_AddTransactionsToOwnedItem",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ownedItemId",
            "in": "path",
            "description": "The identifier of the owned item",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "transactions",
            "in": "body",
            "description": "The collection of transactions",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Transaction"
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "NoContent"
          },
          "400": {
            "description": "BadRequest"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/owneditems/{ownedItemId}": {
      "delete": {
        "tags": [
          "OwnedItems"
        ],
        "summary": "Delete all transactions for an owned item",
        "operationId": "OwnedItems_DeleteByOwnedItemId",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ownedItemId",
            "in": "path",
            "description": "The identifier of the owned item",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "204": {
            "description": "NoContent"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/owneditems/{ownedItemId}/metrics": {
      "get": {
        "tags": [
          "OwnedItems"
        ],
        "summary": "Get metrics for an owned item",
        "operationId": "OwnedItems_GetMetricsByOwnedItemId",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ownedItemId",
            "in": "path",
            "description": "The identifier of the owned item",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "Filter transactions using OData syntax e.g. $filter=bookingDate ge 2017-01-01T23:59:59.99Z and bookingDate lt 2017-02-01T23:59:59.99Z",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MetricsItem"
              }
            },
            "examples": {
              "application/json": {
                "name": "ExpenditureEssential",
                "amount": 1265.54
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/owneditems/{ownedItemId}/recurrences": {
      "get": {
        "tags": [
          "OwnedItems"
        ],
        "summary": "Return a collection of recurrent transactions",
        "operationId": "OwnedItems_GetRecurrencesForOwnedItem",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ownedItemId",
            "in": "path",
            "description": "The identifier of the owned item",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Recurrence"
              }
            },
            "examples": {
              "application/json": {
                "frequency": "Monthly",
                "day": 7,
                "amount": 9.99,
                "description": "Netflix Subscription",
                "category": "TV Subscription",
                "consistency": 1,
                "transactionIds": [
                  698225,
                  855565
                ]
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/parties/{partyId}/metrics": {
      "get": {
        "tags": [
          "Parties"
        ],
        "summary": "Get metrics for an owned item",
        "operationId": "Parties_GetMetricsByPartyId",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "partyId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "Filter transactions using OData syntax e.g. $filter=bookingDate ge 2017-01-01T23:59:59.99Z and bookingDate lt 2017-02-01T23:59:59.99Z",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MetricsItem"
              }
            },
            "examples": {
              "application/json": {
                "name": "ExpenditureEssential",
                "amount": 1265.54
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/transactions": {
      "post": {
        "tags": [
          "Transactions"
        ],
        "summary": "Add a new transaction",
        "operationId": "Transactions_Create",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "transaction",
            "in": "body",
            "description": "The new transaction",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Transaction"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Transaction"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/transactions/{id}": {
      "get": {
        "tags": [
          "Transactions"
        ],
        "summary": "Get an identified transaction",
        "operationId": "Transactions_GetById",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The transaction identifier",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Transaction"
            },
            "examples": {
              "application/json": {
                "id": 556665,
                "createdDate": "0001-01-01T00:00:00+00:00",
                "bookingDate": "2018-10-07T22:07:18.6905359+00:00",
                "amount": 9.99,
                "currency": "GBP",
                "balance": 1236.65,
                "address": {
                  "line1": "20 Kensington High Street",
                  "city": "London",
                  "country": "United Kingdom",
                  "postcode": "W8 5JH",
                  "latitude": 51.5074,
                  "longitude": 0.1278
                },
                "merchant": {
                  "name": "Netflix",
                  "isoCode": "69865"
                },
                "codes": [
                  {
                    "scheme": "OpenBanking",
                    "code": "IssuedCreditTransfer",
                    "subCode": "AutomaticTransfer"
                  },
                  {
                    "scheme": "AlphaBank",
                    "code": "DirectDebit"
                  }
                ],
                "categorisations": [
                  {
                    "scheme": "Trusso",
                    "code": "EXP-G03",
                    "confidence": 0.9
                  },
                  {
                    "scheme": "Yodlee",
                    "code": "Entertainment/Recreation",
                    "confidence": 1
                  }
                ],
                "descriptions": [
                  {
                    "scheme": "YodleeOriginal",
                    "text": "Netflix NT346980277"
                  },
                  {
                    "scheme": "YodleeSimple",
                    "text": "Netflix"
                  }
                ]
              }
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Transaction"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "tags": [
          "Transactions"
        ],
        "summary": "Update an identified transaction",
        "operationId": "Transactions_Update",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The transaction identifier",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "transaction",
            "in": "body",
            "description": "The updated transaction state",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Transaction"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "delete": {
        "tags": [
          "Transactions"
        ],
        "summary": "Delete an identified transaction",
        "operationId": "Transactions_Delete",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The transaction identifier",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "NoContent"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    }
  },
  "definitions": {
    "Transaction": {
      "description": "A financial transaction",
      "required": [
        "ownedItemId",
        "status"
      ],
      "type": "object",
      "properties": {
        "id": {
          "format": "int64",
          "description": "The identifier of the transaction",
          "type": "integer"
        },
        "ownedItemId": {
          "format": "int32",
          "description": "The identifier of the containing ownedItem",
          "type": "integer"
        },
        "reference": {
          "description": "A unique reference for the transaction",
          "maxLength": 50,
          "minLength": 0,
          "type": "string"
        },
        "createdDate": {
          "format": "date-time",
          "description": "The created date of the transaction representation",
          "type": "string",
          "example": "2018-10-10T22:07:18.2530304+00:00"
        },
        "bookingDate": {
          "format": "date-time",
          "description": "The date when the transaction was posted to the account",
          "type": "string",
          "example": "2018-10-10T22:07:18.2530304+00:00"
        },
        "valueDate": {
          "format": "date-time",
          "description": "Date and time when assets become available to the account in case of a credit, or cease to be available in case of a debit.",
          "type": "string",
          "example": "2018-10-10T22:07:18.2530304+00:00"
        },
        "amount": {
          "format": "double",
          "description": "The monetary amount. For a debit the amount is a negative value, whilst a credit is a positive value. \r\nFor example, the purchase of a coffee would be -2.75 whilst a salary payment would be 3531.75",
          "type": "number"
        },
        "transactionId": {
          "description": "The unique identifier for the transaction within an servicing institution e.g. TransactionId from Open Banking",
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "currency": {
          "description": "The ISO 4217 currency code for the amount and the balances",
          "maxLength": 3,
          "minLength": 0,
          "type": "string"
        },
        "balance": {
          "format": "double",
          "description": "The current balance",
          "type": "number"
        },
        "status": {
          "description": "The current status",
          "enum": [
            "Booked",
            "Pending"
          ],
          "type": "string"
        },
        "address": {
          "$ref": "#/definitions/Address",
          "description": "The address location"
        },
        "merchant": {
          "$ref": "#/definitions/Merchant",
          "description": "The merchant details"
        },
        "codes": {
          "description": "A collection of bank codes",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TransactionCode"
          }
        },
        "categorisations": {
          "description": "A collection of categorisations",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Categorisation"
          }
        },
        "descriptions": {
          "description": "A collection of descriptions",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Description"
          }
        }
      },
      "example": {
        "id": 556665,
        "createdDate": "0001-01-01T00:00:00+00:00",
        "bookingDate": "2018-10-07T22:07:18.6905359+00:00",
        "amount": 9.99,
        "currency": "GBP",
        "balance": 1236.65,
        "address": {
          "line1": "20 Kensington High Street",
          "city": "London",
          "country": "United Kingdom",
          "postcode": "W8 5JH",
          "latitude": 51.5074,
          "longitude": 0.1278
        },
        "merchant": {
          "name": "Netflix",
          "isoCode": "69865"
        },
        "codes": [
          {
            "scheme": "OpenBanking",
            "code": "IssuedCreditTransfer",
            "subCode": "AutomaticTransfer"
          },
          {
            "scheme": "AlphaBank",
            "code": "DirectDebit"
          }
        ],
        "categorisations": [
          {
            "scheme": "Trusso",
            "code": "EXP-G03",
            "confidence": 0.9
          },
          {
            "scheme": "Yodlee",
            "code": "Entertainment/Recreation",
            "confidence": 1
          }
        ],
        "descriptions": [
          {
            "scheme": "YodleeOriginal",
            "text": "Netflix NT346980277"
          },
          {
            "scheme": "YodleeSimple",
            "text": "Netflix"
          }
        ]
      }
    },
    "Address": {
      "description": "A representation of an Address",
      "type": "object",
      "properties": {
        "line1": {
          "description": "The first line of the address",
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "city": {
          "description": "City",
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "country": {
          "description": "Country",
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "postcode": {
          "description": "Postcode",
          "maxLength": 50,
          "minLength": 0,
          "type": "string"
        },
        "latitude": {
          "format": "double",
          "description": "The latitude of the coordinate",
          "type": "number"
        },
        "longitude": {
          "format": "double",
          "description": "The longitude of the coordinate",
          "type": "number"
        }
      }
    },
    "Merchant": {
      "description": "A merchant of a transaction",
      "type": "object",
      "properties": {
        "name": {
          "description": "The name",
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "isoCode": {
          "description": "The ISO 18245 code",
          "maxLength": 50,
          "minLength": 0,
          "type": "string"
        }
      }
    },
    "TransactionCode": {
      "description": "A standardised code",
      "required": [
        "scheme",
        "code"
      ],
      "type": "object",
      "properties": {
        "scheme": {
          "description": "The scheme of the code list",
          "maxLength": 50,
          "minLength": 0,
          "type": "string"
        },
        "code": {
          "description": "The code",
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "subCode": {
          "description": "The sub-code within the code",
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        }
      }
    },
    "Categorisation": {
      "description": "A categorisation of a transaction",
      "type": "object",
      "properties": {
        "scheme": {
          "description": "The scheme of the categorisation",
          "maxLength": 50,
          "minLength": 0,
          "type": "string"
        },
        "code": {
          "description": "The code value from the given scheme",
          "maxLength": 50,
          "minLength": 0,
          "type": "string"
        },
        "confidence": {
          "format": "double",
          "description": "The confidence level for the categorisation",
          "type": "number"
        },
        "name": {
          "maxLength": 50,
          "minLength": 0,
          "type": "string"
        }
      }
    },
    "Description": {
      "description": "A description of a transaction",
      "type": "object",
      "properties": {
        "scheme": {
          "description": "The source of the description",
          "maxLength": 50,
          "minLength": 0,
          "type": "string"
        },
        "text": {
          "description": "The textual description",
          "maxLength": 500,
          "minLength": 0,
          "type": "string"
        }
      }
    },
    "MetricsItem": {
      "description": "A representation of a Metric Datum",
      "type": "object",
      "properties": {
        "name": {
          "description": "The Name",
          "maxLength": 50,
          "minLength": 0,
          "type": "string"
        },
        "amount": {
          "format": "double",
          "description": "The amount",
          "type": "number"
        }
      }
    },
    "Recurrence": {
      "description": "A recurring series of transactions",
      "type": "object",
      "properties": {
        "frequency": {
          "description": "The recurrence frequency",
          "enum": [
            "Daily",
            "Weekly",
            "Fortnightly",
            "Monthly",
            "Inconclusive"
          ],
          "type": "string"
        },
        "day": {
          "format": "int32",
          "description": "The day of the month the transaction recurs",
          "type": "integer"
        },
        "amount": {
          "format": "double",
          "description": "The monetary value of the recurring transaction",
          "type": "number"
        },
        "description": {
          "description": "The description of the recurring transaction",
          "maxLength": 500,
          "minLength": 0,
          "type": "string"
        },
        "category": {
          "description": "The category of the recurring transaction",
          "maxLength": 50,
          "minLength": 0,
          "type": "string"
        },
        "consistency": {
          "format": "double",
          "description": "The level of consistency of the recurrence",
          "type": "number"
        },
        "transactionIds": {
          "description": "The identifiers of the recurring transactions",
          "type": "array",
          "items": {
            "format": "int64",
            "type": "integer"
          }
        }
      }
    }
  }
}